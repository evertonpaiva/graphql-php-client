.prepara_variaveis: &prepara_variaveis
  - export DOCKER_TAG=`echo ${CI_BUILD_REF_NAME} | sed s/dev/latest/`
  - export SHORT_SHA=`echo ${CI_COMMIT_SHA} | cut -c1-8`
  - export IMG_NAME=`echo ${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}:${DOCKER_TAG}`

image: docker:dind

# Definindo os estagios
stages:
  - build-and-push
  - tests

# Criando imagem e enviando para o hub
build-test:
  stage: build-and-push
  image: docker:dind
  before_script:
    - *prepara_variaveis
  script:
    - >
      if [ "$BUILD_TEST_IMG" == "S" ]; then
        echo "Criando imagem"
        docker build --no-cache -t ${CI_PROJECT_NAME}:${DOCKER_TAG} -f Dockerfile .
        docker tag ${CI_PROJECT_NAME}:${DOCKER_TAG} ${IMG_NAME}
        echo ${CI_REGISTRY_PASSWORD} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
        echo "Enviando para o hub"
        docker push ${IMG_NAME}
        docker logout ${CI_REGISTRY}
      else
        echo "Build desabilitado, pulando etapa...";
      fi
  when: on_success
  only:
    - test

# Executando o estagio de testes

#PHP Unit
tests-phpunit:
  stage: tests
  image: hub.dds.ufvjm.edu.br/micro/graphql-client:test
  before_script:
    - export APP_ENV='testing'
  script:
    - echo "Instalando dependências"
    - composer install
    - echo "Executando testes"
    # PHP Unit
    - ./phpunit.sh
  when: on_success
  only:
    - test

# Code Sniffer, Security check, Mess Detector
tests-other:
  stage: tests
  image: hub.dds.ufvjm.edu.br/micro/graphql-client:test
  before_script:
    - export APP_ENV='testing'
  script:
    - echo "Instalando dependências"
    - composer install
    - echo "Executando testes"
    # Padrao de codificacao
    - ./phpcs.sh
    # Vulnerabilidades de seguranca nas bibliotecas
    - ./security-check.sh
    # Verificador de erros/sujeira PHP Mess Detector
    - ./phpmd.sh
  when: on_success
  only:
    - test
